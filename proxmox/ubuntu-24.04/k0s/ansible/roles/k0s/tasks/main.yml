---
- name: Stop k0s service if running
  shell: |
    systemctl stop k0scontroller || true
  become: true
  ignore_errors: true

- name: Remove k0s controller service if exists
  file:
    path: /etc/systemd/system/k0scontroller.service
    state: absent
  become: true

- name: Reset k0s state
  command: "{{ k0s_binary_path }} reset"
  become: true
  ignore_errors: true

- name: Download k0s binary
  get_url:
    url: "https://github.com/k0sproject/k0s/releases/download/{{ k0s_version }}/k0s-{{ k0s_version }}-amd64"
    dest: "{{ k0s_binary_path }}"
    mode: '0755'
  become: true

- name: Create k0s directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ k0s_config_dir }}"
    - "{{ k0s_data_dir }}"
  become: true

- name: Generate k0s configuration
  command: "{{ k0s_binary_path }} default-config > {{ k0s_config_dir }}/k0s.yaml"
  when: inventory_hostname == groups['k0s_controllers'][0]
  become: true

- name: Install k0s controller with worker
  command: "{{ k0s_binary_path }} install controller --enable-worker"
  become: true

- name: Start k0s on first node
  command: "{{ k0s_binary_path }} start"
  when: inventory_hostname == groups['k0s_controllers'][0]
  become: true

- name: Wait for k0scontroller to be ready
  shell: |
    for i in {1..30}; do
      {{ k0s_binary_path }} status && exit 0
      sleep 5
    done
    exit 1
  when: inventory_hostname == groups['k0s_controllers'][0]
  register: k0s_status
  retries: 30
  delay: 5
  changed_when: false
  become: true

- name: Get join token for additional controllers
  command: "{{ k0s_binary_path }} token create --role=controller --expiry=0"
  register: controller_token
  when: inventory_hostname == groups['k0s_controllers'][0]
  become: true

- name: Set controller token fact
  set_fact:
    k0s_controller_token: "{{ controller_token.stdout }}"
  when: inventory_hostname == groups['k0s_controllers'][0]

- name: Write controller join token to file
  copy:
    content: "{{ hostvars[groups['k0s_controllers'][0]]['k0s_controller_token'] }}"
    dest: /tmp/k0s_controller_token
  when:
    - inventory_hostname in groups['k0s_controllers']
    - inventory_hostname != groups['k0s_controllers'][0]
  become: true

- name: Join additional controllers
  command: "{{ k0s_binary_path }} install controller --enable-worker --token-file /tmp/k0s_controller_token --config {{ k0s_config_dir }}/k0s.yaml"
  when:
    - inventory_hostname in groups['k0s_controllers']
    - inventory_hostname != groups['k0s_controllers'][0]
  become: true

- name: Start k0s on additional nodes
  command: "{{ k0s_binary_path }} start"
  when:
    - inventory_hostname in groups['k0s_controllers']
    - inventory_hostname != groups['k0s_controllers'][0]
  become: true

- name: Fetch k0s config from first controller
  fetch:
    src: "{{ k0s_config_dir }}/k0s.yaml"
    dest: "/tmp/k0s.yaml"
    flat: yes
  delegate_to: "{{ groups['k0s_controllers'][0] }}"
  run_once: true

- name: Distribute k0s config to joining controllers
  copy:
    src: "/tmp/k0s.yaml"
    dest: "{{ k0s_config_dir }}/k0s.yaml"
  when:
    - inventory_hostname in groups['k0s_controllers']
    - inventory_hostname != groups['k0s_controllers'][0]
  become: true

- name: Wait for k3s API to be available on first node
  uri:
    url: "https://{{ groups['k3s_cluster'][0] }}:6443/healthz"
    method: GET
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 30
  delay: 5
  when: inventory_hostname != groups['k3s_cluster'][0]
  delegate_to: "{{ groups['k3s_cluster'][0] }}"