---
- name: Install prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Ensure /etc/apt/keyrings exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Docker GPG key as docker.asc
  get_url:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
    force: yes

- name: Add Docker apt repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu mantic stable"
    state: present
    filename: docker

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Docker packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes

- name: Ensure docker service is running
  service:
    name: docker
    state: started
    enabled: true

- name: Add current user to docker group
  user:
    name: "{{ ansible_ssh_user }}"
    groups: docker
    append: yes

# Swarm init and join logic
- name: Initialize Docker Swarm on first manager
  shell: |
    docker swarm init --advertise-addr {{ ansible_host }}
  args:
    creates: /tmp/swarm_initialized
  when: inventory_hostname == groups['docker_managers'][0]
  register: swarm_init
  changed_when: "'Swarm initialized' in swarm_init.stdout or 'This node is already part of a swarm' in swarm_init.stdout"

- name: Get join-token for managers
  shell: docker swarm join-token manager -q
  register: manager_token
  when: inventory_hostname == groups['docker_managers'][0]
  changed_when: false

- name: Set join token fact (global)
  set_fact:
    swarm_manager_token: "{{ manager_token.stdout }}"
  when: inventory_hostname == groups['docker_managers'][0]
  delegate_to: localhost
  run_once: true

- name: Wait for join token to be available
  wait_for:
    timeout: 30
  when: inventory_hostname != groups['docker_managers'][0]

- name: Join other managers to the swarm
  shell: |
    docker swarm join --token {{ hostvars[groups['docker_managers'][0]].swarm_manager_token | default(swarm_manager_token) }} {{ groups['docker_managers'][0] }}:2377
  when: inventory_hostname != groups['docker_managers'][0]
  args:
    creates: /tmp/swarm_initialized
  register: swarm_join
  failed_when: "'This node is already part of a swarm' not in swarm_join.stdout and swarm_join.rc != 0"

- name: Mark node as joined
  file:
    path: /tmp/swarm_initialized
    state: touch

# Node labeling (fix node ID logic)
- name: Add node label for worker group
  shell: |
    docker node update --label-add worker.group={{ node_labels[inventory_hostname] }} $(docker node ls --filter "name=$(hostname)" --format "{{'{{.ID}}'}}")
  environment:
    DOCKER_HOST: "unix:///var/run/docker.sock"
  when: inventory_hostname in node_labels

- name: Install keepalived
  apt:
    name: keepalived
    state: present
    update_cache: yes

- name: Configure keepalived
  template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
  notify: Restart keepalived

- name: Ensure keepalived is running
  service:
    name: keepalived
    state: started
    enabled: true

- name: Create Portainer data volume
  shell: docker volume create portainer_data
  args:
    creates: /var/lib/docker/volumes/portainer_data

- name: Deploy Portainer service (only on first manager)
  shell: |
    docker service create \
      --name portainer \
      --publish 9000:9000 \
      --replicas=1 \
      --constraint 'node.role==manager' \
      --mount type=volume,source=portainer_data,target=/data \
      --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
      portainer/portainer-ce
  when: inventory_hostname == groups['docker_managers'][0]
  args:
    creates: /tmp/portainer_deployed

- name: Mark Portainer as deployed
  file:
    path: /tmp/portainer_deployed
    state: touch
  when: inventory_hostname == groups['docker_managers'][0]

# Handlers
- name: Restart keepalived
  service:
    name: keepalived
    state: restarted